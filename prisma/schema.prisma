// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Color {
  mint_green    @map("mint-green")
  sky_blue      @map("sky-blue")
  lavender
  peach
  pastel_yellow @map("pastel-yellow")
  pale_coral    @map("pale-coral")
  white
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  habits        Habit[]
  password      String?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model HabitLog {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  completed Boolean
  Habit     Habit?   @relation(fields: [habitId], references: [id])

  @@unique([habitId, date])
}

model Habit {
  id       String  @id @default(cuid())
  title    String
  subtitle String?
  icon     String
  color    Color
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs HabitLog[]

  @@map("habits")
}
